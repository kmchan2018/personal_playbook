
[Service]

#
# It enables many of the protection systemd can offer. The following
# restrictions are notably missing:
#
# - PrivateNetwork is disabled because we want httpd to work in the
#   main network namespace.
#
# - PrivateMounts is automatically enabled by other directives, so
#   it is not explicitly enabled.
#
# - RestrictAddressFamilies allows AF_UNIX, AF_INET, and AF_INET6
#   for obvious reason.
#
# - PrivateUsers is disabled since it blocks the httpd from changing
#   its effective UID/GID. Furthermore, httpd use file owner and group
#   for access control on some files.
#

LockPersonality=yes
MemoryDenyWriteExecute=yes
NoNewPrivileges=yes
ProtectClock=yes
ProtectControlGroups=yes
ProtectHome=yes
ProtectHostname=yes
ProtectKernelLogs=yes
ProtectKernelModules=yes
ProtectKernelTunables=yes
ProtectProc=invisible
ProtectSystem=strict
PrivateDevices=yes
PrivateIPC=yes
PrivateTmp=yes
RestrictAddressFamilies=AF_UNIX AF_INET AF_INET6
RestrictNamespaces=yes
RestrictRealtime=yes
RestrictSUIDSGID=true
UMask=0077

#
# While ProtectHome hides most user files from httpd, some user files
# can still be found in some other places. The following blacklist
# blocks such locations to make sure that all user files are out of
# reach.
#

InaccessiblePaths=-/boot
InaccessiblePaths=-/cdrom
InaccessiblePaths=-/lost+found
InaccessiblePaths=-/media
InaccessiblePaths=-/mnt
InaccessiblePaths=-/run/media
InaccessiblePaths=-/var/run/media
InaccessiblePaths=-/var/run/user

#
# ProtectSystem makes most of the directories read-only. The following
# directories are whitelisted to be writable since they are used by
# httpd to do its job.
#

ReadWritePaths=-/run/httpd
ReadWritePaths=-/var/cache/httpd
ReadWritePaths=-/var/lock
ReadWritePaths=-/var/log/httpd
ReadWritePaths=-/var/run/httpd

#
# Most capabilities are removed, but a few remains because httpd requires
# them to work properly:
#
# CAP_CHOWN            -> change the ownership of the sockets
# CAP_KILL             -> send signal to child process for reload/restart/stop/etc
# CAP_NET_BIND_SERVICE -> listen to privileged ports like port 80 and 443
# CAP_SETGID           -> enable child process to change its effective UID/GID
# CAP_SETUID           -> enable child process to change its effective UID/GID
#

CapabilityBoundingSet=~CAP_AUDIT_CONTROL
CapabilityBoundingSet=~CAP_AUDIT_READ
CapabilityBoundingSet=~CAP_AUDIT_WRITE
CapabilityBoundingSet=~CAP_BLOCK_SUSPEND
CapabilityBoundingSet=~CAP_BPF
CapabilityBoundingSet=~CAP_CHECKPOINT_RESTORE
CapabilityBoundingSet=~CAP_DAC_OVERRIDE
CapabilityBoundingSet=~CAP_DAC_READ_SEARCH
CapabilityBoundingSet=~CAP_FOWNER
CapabilityBoundingSet=~CAP_FSETID
CapabilityBoundingSet=~CAP_IPC_LOCK
CapabilityBoundingSet=~CAP_IPC_OWNER
CapabilityBoundingSet=~CAP_LEASE
CapabilityBoundingSet=~CAP_LINUX_IMMUTABLE
CapabilityBoundingSet=~CAP_MAC_ADMIN
CapabilityBoundingSet=~CAP_MAC_OVERRIDE
CapabilityBoundingSet=~CAP_MKNOD
CapabilityBoundingSet=~CAP_NET_ADMIN
CapabilityBoundingSet=~CAP_NET_BROADCAST
CapabilityBoundingSet=~CAP_NET_RAW
CapabilityBoundingSet=~CAP_PERFMON
CapabilityBoundingSet=~CAP_SETFCAP
CapabilityBoundingSet=~CAP_SETPCAP
CapabilityBoundingSet=~CAP_SYS_ADMIN
CapabilityBoundingSet=~CAP_SYS_BOOT
CapabilityBoundingSet=~CAP_SYS_CHROOT
CapabilityBoundingSet=~CAP_SYS_MODULE
CapabilityBoundingSet=~CAP_SYS_NICE
CapabilityBoundingSet=~CAP_SYS_PACCT
CapabilityBoundingSet=~CAP_SYS_PTRACE
CapabilityBoundingSet=~CAP_SYS_RAWIO
CapabilityBoundingSet=~CAP_SYS_RESOURCE
CapabilityBoundingSet=~CAP_SYS_TIME
CapabilityBoundingSet=~CAP_SYS_TTY_CONFIG
CapabilityBoundingSet=~CAP_SYSLOG
CapabilityBoundingSet=~CAP_WAKE_ALARM

#
# Many of the unusual syscalls are disabled. Note that @privileged is
# kept because httpd needs it to change its effective UID/GID.
#

SystemCallArchitectures=native

SystemCallFilter=~@clock
SystemCallFilter=~@cpu-emulation
SystemCallFilter=~@debug
SystemCallFilter=~@module
SystemCallFilter=~@mount
SystemCallFilter=~@obsolete
SystemCallFilter=~@raw-io
SystemCallFilter=~@reboot
SystemCallFilter=~@resources
SystemCallFilter=~@swap

