#!/usr/bin/env python3

import sys
import argparse
import dbus
import functools
import signal
import socketserver
import threading
import time
import xml.parsers.expat

##########################################################################
#
# This class is responsible for polling udisks2 for available drives and
# their statuses.
#
# Drive enumeration is done by finding top-level block devices backed by
# a physical drive. State is collected from udisks2 drive properties.
# Whenever the properties are too old, udisks2 is asked to update them
# without waking up any sleeping disks.
#

class Poller(object):
	def __init__(self, threshold = 60):
		self.__bus = dbus.SystemBus()
		self.__udisks = self.__bus.get_object('org.freedesktop.UDisks2', '/org/freedesktop/UDisks2/Manager')
		self.__threshold = threshold

	def poll(self):
		drives = self.enumerate_drives()
		states = self.collect_states(drives)
		return states

	def enumerate_drives(self):
		paths = self.__udisks.GetBlockDevices([], dbus_interface='org.freedesktop.UDisks2.Manager')
		drives = dict()

		for path in paths:
			proxy = self.__bus.get_object('org.freedesktop.UDisks2', path)
			interfaces = self.extract_interfaces(proxy)
			properties = proxy.GetAll('org.freedesktop.UDisks2.Block', dbus_interface='org.freedesktop.DBus.Properties')
			name = str(bytes(properties['Device']).strip(b'\x00'), 'utf-8')
			alias = str(bytes(properties['PreferredDevice']).strip(b'\x00'), 'utf-8')
			drive = properties['Drive']

			if 'org.freedesktop.UDisks2.Partition' in interfaces:
				continue
			elif 'org.freedesktop.UDisks2.Loop' in interfaces:
				continue
			elif drive == '/':
				continue
			else:
				drives[alias] = self.__bus.get_object('org.freedesktop.UDisks2', drive)

		return drives

	def collect_states(self, drives):
		now = time.time()
		states = dict()

		for device, drive in drives.items():
			interfaces = self.extract_interfaces(drive)
			properties = drive.GetAll('org.freedesktop.UDisks2.Drive', dbus_interface='org.freedesktop.DBus.Properties')
			vendor = properties['Vendor']
			model = properties['Model']
			revision = properties['Revision']
			serial = properties['Serial']

			if 'org.freedesktop.UDisks2.Drive.Ata' not in interfaces:
				states[device] = Result(device, vendor, model, revision, serial, False, False, False, 0)
			else:
				properties = drive.GetAll('org.freedesktop.UDisks2.Drive.Ata', dbus_interface='org.freedesktop.DBus.Properties')
				smart_supported = properties['SmartSupported']
				smart_enabled = properties['SmartEnabled']
				smart_updated = properties['SmartUpdated']
				smart_temperature = round(properties['SmartTemperature'] - 273.16)

				if smart_supported == False:
					states[device] = Result(device, vendor, model, revision, serial, False, False, False, 0)
				elif smart_enabled == False:
					states[device] = Result(device, vendor, model, revision, serial, True, False, False, 0)
				elif now != 0 and smart_updated > now - self.__threshold:
					states[device] = Result(device, vendor, model, revision, serial, True, True, True, smart_temperature)
				else:
					try:
						drive.SmartUpdate({ 'auth.no_user_interaction': True, 'nowakeup': False }, dbus_interface='org.freedesktop.UDisks2.Drive.Ata')
						properties = drive.GetAll('org.freedesktop.UDisks2.Drive.Ata', dbus_interface='org.freedesktop.DBus.Properties')
						smart_updated = properties['SmartUpdated']
						smart_temperature = round(properties['SmartTemperature'] - 273.16)
						if now != 0 and smart_updated > now - self.__threshold:
							states[device] = Result(device, vendor, model, revision, serial, True, True, True, smart_temperature)
						else:
							states[device] = Result(device, vendor, model, revision, serial, True, True, False, smart_temperature)
					except Exception as e:
						states[device] = Result(device, vendor, model, revision, serial, True, True, False, smart_temperature)

		return states
		
	def extract_interfaces(self, proxy):
		interfaces = set()
		parser = xml.parsers.expat.ParserCreate('UTF-8', '')
		parser.buffer_text = True
		parser.ordered_attributes = 0
		parser.StartElementHandler = functools.partial(Poller.collect_interface_name, interfaces)
		parser.Parse(proxy.Introspect(dbus_interface='org.freedesktop.DBus.Introspectable'))
		return interfaces

	@staticmethod
	def collect_interface_name(collection, tag, attributes):
		if tag == 'interface' and 'name' in attributes:
			collection.add(attributes['name'])

##########################################################################
#
# This class stores the poll result of an individual drive. It includes
# metadata about the drive as well as its SMART statuses.
#

class Result(object):
	def __init__(self, device, vendor, model, revision, serial, supported, enabled, updated, temperature):
		self.device = device
		self.vendor = vendor
		self.model = model
		self.revision = revision
		self.serial = serial
		self.supported = supported
		self.enabled = enabled
		self.updated = updated
		self.temperature = temperature

	def __repr__(self):
		return 'device=%s, vendor=%s, model=%s, revision=%s, serial=%s, supported=%s, enabled=%s, updated=%s, temp=%s' % (
			self.device,
			self.vendor,
			self.model,
			self.revision,
			self.serial,
			self.supported,
			self.enabled,
			self.updated,
			self.temperature
		)

##########################################################################
#
# This class stores the global application state including the most recent
# poll result of all monitored drives.
#

class State(object):
	def __init__(self):
		self.drives = {}

##########################################################################
#
# This class is responsible for periodic udisks2 polling in the background.
# Poll results are written to the application state. Polls are separated
# by the given time period.
#

class Monitor(object):
	def __init__(self, poller, state, period = 30, step = 2):
		self.__poller = poller
		self.__state = state
		self.__active = True
		self.__period = period
		self.__step = step

	def monitor(self):
		self.__active = True

		while self.__active == True:
			self.__state.drives = self.__poller.poll()
			countdown = self.__period

			while self.__active == True and countdown > 0:
				step = min(countdown, self.__step)
				time.sleep(step)
				countdown = countdown - step

	def shutdown(self):
		self.__active = False

##########################################################################
#
# This class is responsible for managing incoming connections and invoking
# handler for them.
#

class Server(socketserver.ThreadingMixIn, socketserver.TCPServer):
	allow_reuse_address = True

##########################################################################
#
# This class is responsible for reporting drive temperature like hddtemp.
#
# Every time a client wants to retrieve drive temperature data, it will
# initiate a new connection to hddtemp daemon. In response to incoming
# connections, hddtemp will send out the drive temperature data for all
# monitored drives and then close the connection.
#
# The message from hddtemp is a simple concatentation of temperature
# data of all the monitored drives without any separator. For each drive,
# the temperature data is represented by string with the pattern
#
#   |<device>|<model>|<temperature>|<unit>|
#
# Each field has the following meaning:
#
#        device - path of the device node
#         model - model name of the drive
#   temperature - temperature of the drive or error code
#          unit - C for celsius, F for fahrenheit or * for error code
#
# Finally, below are a list of possible error codes:
#
#            NA - temperature is not available
#           UNK - the drive is not recognized
#           NOS - the drive is recognized but it has no temperature sensor
#           SLP - the drive is sleeping and cannot be checked
#           ERR - some error occurs when reading temperature
#

class Handler(socketserver.BaseRequestHandler):
	def handle(self):
		drives = self.server.state.drives
		reply = [];

		for device, result in drives.items():
			if result.supported == False:
				reply.append('|%s|%s|NOS|*|' % (result.device, result.model))
			elif result.enabled == False:
				reply.append('|%s|%s|NA|*|' % (result.device, result.model))
			elif result.updated == False:
				reply.append('|%s|%s|SLP|*|' % (result.device, result.model))
			else:
				reply.append('|%s|%s|%d|C|' % (result.device, result.model, result.temperature))

		self.request.sendall(bytes(('').join(reply), 'utf-8'))

##########################################################################
#
# Main script.
#

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='HDDTemp Bridge for UDisks2')
	parser.add_argument('-b', '--bind', dest='bind', default='0.0.0.0', type=str, help='network interface the server should bind to')
	parser.add_argument('-p', '--port', dest='port', default=7634, type=int, help='tcp port the server should listen to')

	arguments = parser.parse_args()
	bind = arguments.bind
	port = arguments.port

	state = State()

	poller = Poller()
	monitor = Monitor(poller, state)

	server = Server((bind, port), Handler)
	server.state = state
	server.daemon_threads = True
	
	monitor_thread = threading.Thread(target=monitor.monitor)
	server_thread = threading.Thread(target=server.serve_forever)
	
	def stop(signum, frame):
		print("[DEBUG] Finishing the service due to signal %d..." % signum, file=sys.stderr)
		monitor.shutdown()
		server.shutdown()
		print("[DEBUG] Done finishing the service", file=sys.stderr)

	print("[DEBUG] Attaching signal handler...", file=sys.stderr)
	signal.signal(signal.SIGINT, stop)
	signal.signal(signal.SIGTERM, stop)

	print("[DEBUG] Starting the service...", file=sys.stderr)
	monitor_thread.start()
	server_thread.start()

	print("[DEBUG] Waiting for the service to finish...", file=sys.stderr)
	server_thread.join()
	monitor_thread.join()

	print("[DEBUG] Cleaning up the service...", file=sys.stderr)
	server.server_close()

