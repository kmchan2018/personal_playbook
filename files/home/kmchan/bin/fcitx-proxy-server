#!/usr/bin/python3

import codecs
import os
import os.path
import sys
import struct

##########################################################################
#
# Detect the common paths honouring the XDG base directory spec
#

user_home_directory = os.path.expanduser("~")
user_config_directory = "%s/.config" % user_home_directory

if "XDG_CONFIG_HOME" in os.environ:
	if os.environ["XDG_CONFIG_HOME"] != "":
		config_directory = os.path.expanduser(os.environ["XDG_CONFIG_HOME"])

fcitx_config_directory = "%s/fcitx" % user_config_directory
fcitx_dbus_directory = "%s/dbus" % fcitx_config_directory

##########################################################################
#
# Detect the current machine id from /etc/machine-id file
#

system_machine = None

if os.path.exists("/etc/machine-id") == False:
	sys.exit(1)
elif os.path.isfile("/etc/machine-id") == False:
	sys.exit(1)
else:
	with open("/etc/machine-id", "rb") as f:
		system_machine = codecs.decode(f.read().strip())

##########################################################################
#
# Detect the current display number via environment variable DISPLAY
#

system_display = None

if "DISPLAY" not in os.environ:
	sys.exit(1)
elif len(os.environ["DISPLAY"]) < 2:
	sys.exit(1)
elif os.environ["DISPLAY"][0] != ":":
	sys.exit(1)
elif (os.environ["DISPLAY"][1:]).isdigit() == False:
	sys.exit(1)
else:
	system_display = int(os.environ["DISPLAY"][1:])

##########################################################################
#
# Determine the fcitx dbus address file
#

fcitx_dbus_address_file = "%s/%s-%d" % (fcitx_dbus_directory, system_machine, system_display)

if os.path.exists(fcitx_dbus_address_file) == False:
	sys.exit(1)
elif os.path.isfile(fcitx_dbus_address_file) == False:
	sys.exit(1)

##########################################################################
#
# Read the fcitx dbus address file and extracts its info. The format will
# be something like this:
#
# unix-abstract:<path>,guid=<guid>\x00<dbus_pid><fcitx_pid>
#

fcitx_dbus_socket = None
fcitx_dbus_guid = None
fcitx_dbus_process = None
fcitx_daemon_process = None

with open(fcitx_dbus_address_file, "rb") as f:
	blob = f.read().strip()

	if len(blob) <= 9:
		sys.exit(1)

	part1 = blob[:-9].split(b",", 2)
	part2 = struct.unpack("<LL", blob[-8:])

	if part1[0].startswith(b"unix:abstract=/") == False:
		sys.exit(1)
	elif part1[1].startswith(b"guid=") == False:
		sys.exit(1)
	else:
		fcitx_dbus_socket = codecs.decode(part1[0][len(b"unix:abstract="):])
		fcitx_dbus_guid = codecs.decode(part1[1][len(b"guid="):])
		fcitx_dbus_process = part2[0]
		fcitx_daemon_process = part2[1]

##########################################################################
#
# Check the existence of the fcitx processes
#

if os.path.exists("/proc/%d" % fcitx_dbus_process) == False:
	sys.exit(1)
elif os.path.exists("/proc/%d" % fcitx_daemon_process) == False:
	sys.exit(1)

##########################################################################
#
# Launch the socat proxy server process
#

proxy_socket = "%s/%s-%d.firejail" % (fcitx_dbus_directory, system_machine, system_display)
proxy_backend = "%s/bin/fcitx-proxy-backend" % user_home_directory

os.execlp("socat", "socat", "ABSTRACT-LISTEN:%s,fork" % proxy_socket, "EXEC:%s,sighup,sigint,sigquit" % proxy_backend)

