

##########################################################################
#
# Location where all server files are located.
#

ServerRoot "/etc/httpd"


##########################################################################
#
# User/group for running the server.
#

User apache
Group apache


##########################################################################
#
# Server host name to be used for generating links.
#

ServerName "{{ service_httpd_default_host_name }}"



##########################################################################
#
# Admin email to be included in error pages.
#

ServerAdmin "root@localhost"


##########################################################################
#
# Modules to be loaded by the server.
#

Include conf.modules.d/*.conf


#########################################################################
#
# Listen to alternative http port with proxy protocol enabled over it.
#

Listen {{ service_httpd_http_port|default(80) }}
{% if service_httpd_proxy_enabled|default(false) == true %}
Listen {{ service_httpd_http_proxy_port|default(8080) }}
{% endif %}
{% if service_httpd_ssl_enabled|default(false) == true %}

<IfFile "{{ service_httpd_default_host_certificate }}">
	<IfFile "{{ service_httpd_default_host_key }}">
		Listen {{ service_httpd_https_port|default(443) }} https
{% if service_httpd_proxy_enabled|default(false) == true %}
		Listen {{ service_web_https_proxy_port|default(8443) }} https
{% endif %}
	</IfFile>
</IfFile>
{% endif %}


##########################################################################
#
# Directory where the files are loaded by default.
#

DocumentRoot "/var/www/html"


##########################################################################
#
# Files to load when a directory is requested.
#

DirectoryIndex index.html index.htm


##########################################################################
#
# Methods the server uses to detect media type of static files.
#

TypesConfig "/etc/mime.types"
MIMEMagicFile "conf/magic"


##########################################################################
#
# Methods the server uses to serves static files.
#

EnableMMAP On
EnableSendfile On


##########################################################################
#
# Reduce server timeout to let the server disconnect stale clients more
# aggressively.
#

Timeout 10


##########################################################################
#
# Enable HTTP Keep Alive to encourage connection reuse by the clients. It
# reduce the server overhead by reducing the number of TCP connections.
#

KeepAlive On


##########################################################################
#
# Limits the number of requests allowed in a single connection when keep
# alive is active. It prevents a single server process from withholding
# too many resources.
#

MaxKeepAliveRequests 100


##########################################################################
#
# Limits the time where the server will wait for subsequent requests in
# a keep alive connection. It allows unused keep alive connections to
# close and release resources as fast as possible.
#

KeepAliveTimeout 5


##########################################################################
#
# Limits each line in the request to a fixed length. It blocks oversized
# requests from being accepted by the server.
#

LimitRequestLine 8192


##########################################################################
#
# Limits the number of headers in a request to a fixed amount. It blocks
# oversized requests from being accepted.
#

LimitRequestFields 100


##########################################################################
#
# Limits each header line in a request to a fixed length. It blocks
# oversized requests from being accepted.
#

LimitRequestFieldSize 8192


##########################################################################
#
# Limits body of a request to a fixed length. It blocks oversized requests
# from being accepted.
#

LimitRequestBody 12582912


##########################################################################
#
# Limits body of a request to a fixed length when the body is an XML file.
# It blocks oversized requests from being accepted.
#

LimitXMLRequestBody 524288


#########################################################################
#
# Always log the remote IP address instead of remote hostname.
#

HostnameLookups Off


#########################################################################
#
# Ensure that the server will only report Apache in response header, but
# not extra details like version, build or operating system.
#

ServerTokens ProductOnly


##########################################################################
#
# Ensure that the server will not attach signature information to server
# generated pages.
#

ServerSignature Off


##########################################################################
#
# Disable trace method in incoming HTTP requests to avoid unnecessary
# risks.
#

TraceEnable Off


#########################################################################
#
# Controls the severity of messages to be logged in the error log.
#

LogLevel warn


#########################################################################
#
# Define the format of the custom log files. Note that the usual %h tags
# is replaced by %a because proxy protocol masks the actual remote client
# address.
#

LogFormat "%a %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
LogFormat "%a %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%a %l %u %t \"%r\" %>s %O" common


##########################################################################
#
# Define the location of the log files.
#

ErrorLog "logs/error_log"
CustomLog "logs/access_log" combined
{% for user in service_httpd_users|default([]) %}
CustomLog "logs/{{ user.name }}/access_log" combined "expr=%{SCRIPT_USER} == '{{ user.name }}'"
{% endfor %}


##########################################################################
#
# Set up the source where the PRNGs used in the SSL engine can be seeded.
#

SSLRandomSeed startup file:/dev/urandom  256
SSLRandomSeed connect builtin


##########################################################################
#
# Allows only TLS 1.2 or above which are more secure and immune to attacks
# which inflicts previous versions of the protocol.
#

SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1


##########################################################################
#
# Ensure that only strong ciphers are used in the connection. It prevents
# downgrade attacks where middleman force communication to use a vulnerable
# ciphersuite. Here we use the ciphersuite recommends by Mozilla for modern
# browsers.
#
# Reference: https://wiki.mozilla.org/Security/Server_Side_TLS
#

SSLCipherSuite TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384


##########################################################################
#
# Ensure that the cipher selection process uses the preferences defined by
# the server above, rather than client preferences. As the cipher suite
# above is sorted from the most secure to the least secure, the directive
# ensures that the most secure ciphersuite is always selected.
#

SSLHonorCipherOrder On


##########################################################################
#
# Disable SSL renegotiation. The feature is used by some TLS attacks so it
# should be disabled.
#

SSLInsecureRenegotiation Off


##########################################################################
#
# Disable SSL compression. The feature is used by some TLS attacks so it
# should be disabled.
#

SSLCompression Off


##########################################################################
#
# Enable SSL session cache.
#

SSLSessionCache shmcb:/run/httpd/sslcache(512000)
SSLSessionCacheTimeout 300


##########################################################################
#
# Enable OCSP stapling which instructs the server to fetch, cache and
# report OCSP validation result to the client. The feature allows client
# to check the current revocation status of the server certificate without
# running the OCSP check themselves.
#

SSLUseStapling On
SSLStaplingCache shmcb:/run/httpd/ssl_ocspcache(4194304)
SSLStaplingResponderTimeout 5
SSLStaplingReturnResponderErrors Off


#########################################################################
#
# Control access to the root directory. Access to the directory is
# denied.
#

<Directory "/">
	Options None
	AllowOverride None
	Require all denied
</Directory>


#########################################################################
#
# Control access to the document root directory. Access to the directory
# is allowed.
#

<Directory "/var/www/html">
	Options FollowSymlinks SymLinksIfOwnerMatch
	AllowOverride All
	Require all granted
</Directory>


#########################################################################
#
# Control access to the CGI executable directory. Since CGI is disabled,
# access to the directory is denied.
#

<Directory "/var/www/cgi-bin">
	Options None
	SSLOptions +StdEnvVars
	AllowOverride None
	Require all denied
</Directory>


##########################################################################
#
# Ensure that git and svn files are not served. These files may contain
# data which should be private.
#

<DirectoryMatch "/\.(git|svn)">
	Require all denied
</DirectoryMatch>


##########################################################################
#
# Ensure that htaccess files are not served. These files may contain
# data which should be private.
#

<Files ".ht*">
	Require all denied
</Files>


##########################################################################
#
# Extra configuration files to be loaded by the server.
#

Include conf.d/*.conf


#########################################################################
#
# Setup default host {{ service_httpd_default_host_name }}.
#

<VirtualHost *:{{ service_httpd_http_port }}>
	ServerName "{{ service_httpd_default_host_name }}"
</VirtualHost>
{% if service_httpd_proxy_enabled|default(false) == true %}

<VirtualHost *:{{ service_httpd_http_proxy_port|default(8080) }}>
	ServerName "{{ service_httpd_default_host_name }}"
	RemoteIPProxyProtocol On
</VirtualHost>
{% endif %}
{% if service_httpd_ssl_enabled|default(false) == true %}

<IfFile "{{ service_httpd_default_host_certificate }}">
	<IfFile "{{ service_httpd_default_host_key }}">
		<VirtualHost *:{{ service_httpd_https_port|default(443) }}>
			ServerName "{{ service_httpd_default_host_name }}"
			SSLEngine On
			SSLCertificateFile "{{ service_httpd_default_host_certificate }}"
			SSLCertificateKeyFile "{{ service_httpd_default_host_key }}"
		</VirtualHost>
{% if service_httpd_proxy_enabled|default(false) == true %}

		<VirtualHost *:{{ service_httpd_https_proxy_port|default(8443) }}>
			ServerName "{{ service_httpd_default_host_name }}"
			RemoteIPProxyProtocol On
			SSLEngine On
			SSLCertificateFile "{{ service_httpd_default_host_certificate }}"
			SSLCertificateKeyFile "{{ service_httpd_default_host_key }}"
		</VirtualHost>
{% endif %}
	</IfFile>
</IfFile>
{% endif %}


{% for vhost in service_httpd_virtual_hosts|default([]) %}
#########################################################################
#
# Setup additional virtual host {{ vhost.name }}.
#

<VirtualHost *:{{ service_httpd_http_port }}>
	ServerName "{{ vhost.name }}"
	DocumentRoot "/var/www/{{ vhost.name }}"
	ErrorLog "logs/{{ vhost.name }}-error_log"
	CustomLog "logs/{{ vhost.name }}-access_log" combined
{% for user in service_httpd_users|default([]) %}
	CustomLog "logs/{{ user.name }}/{{ vhost.name }}-access_log" combined "expr=%{SCRIPT_USER} == '{{ user.name }}'"
{% endfor %}
</VirtualHost>
{% if service_httpd_proxy_enabled|default(false) == true %}

<VirtualHost *:{{ service_httpd_http_proxy_port|default(8080) }}>
	ServerName "{{ vhost.name }}"
	DocumentRoot "/var/www/{{ vhost.name }}"
	ErrorLog "logs/{{ vhost.name }}-error_log"
	CustomLog "logs/{{ vhost.name }}-access_log" combined
{% for user in service_httpd_users|default([]) %}
	CustomLog "logs/{{ user.name }}/{{ vhost.name }}-access_log" combined "expr=%{SCRIPT_USER} == '{{ user.name }}'"
{% endfor %}
</VirtualHost>
{% endif %}
{% if service_httpd_ssl_enabled|default(false) == true %}

<IfFile "{{ vhost.certificate }}">
	<IfFile "{{ vhost.key }}">
		<VirtualHost *:{{ service_httpd_https_port|default(443) }}>
			ServerName "{{ vhost.name }}"
			DocumentRoot "/var/www/{{ vhost.name }}"
			ErrorLog "logs/{{ vhost.name }}-error_log"
			CustomLog "logs/{{ vhost.name }}-access_log" combined
{% for user in service_httpd_users|default([]) %}
			CustomLog "logs/{{ user.name }}/{{ vhost.name }}-access_log" combined "expr=%{SCRIPT_USER} == '{{ user.name }}'"
{% endfor %}
			SSLCertificateFile "{{ vhost.certificate }}"
			SSLCertificateKeyFile "{{ vhost.apache_key }}"
		</VirtualHost>
{% if service_httpd_proxy_enabled|default(false) == true %}

		<VirtualHost *:{{ service_httpd_https_proxy_port|default(8443) }}>
			ServerName "{{ vhost.name }}"
			DocumentRoot "/var/www/{{ vhost.name }}"
			ErrorLog "logs/{{ vhost.name }}-error_log"
			CustomLog "logs/{{ vhost.name }}-access_log" combined
{% for user in service_httpd_users|default([]) %}
			CustomLog "logs/{{ user.name }}/{{ vhost.name }}-access_log" combined "expr=%{SCRIPT_USER} == '{{ user.name }}'"
{% endfor %}
			SSLCertificateFile "{{ vhost.certificate }}"
			SSLCertificateKeyFile "{{ vhost.key }}"
		</VirtualHost>
{% endif %}
	</IfFile>
</IfFile>
{% endif %}
{% endfor %}
