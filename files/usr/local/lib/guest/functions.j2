#!/bin/bash


{% set name = item[0].name -%}
{%- set title = item[0].title -%}
{%- set account = item[0].account -%}

{%- set config_directory = "/etc/default/guest" -%}
{%- set data_directory = guest_data_prefix ~ "/" ~ name -%}
{%- set socket_directory = guest_socket_prefix ~ "/" ~ name -%}
{%- set ivshmem_directory = guest_ivshmem_prefix ~ "/" ~ name -%}

{%- set config_file = config_directory ~ "/" ~ name -%}
{%- set bios_file = data_directory ~ '/OVMF_VARS.fd' -%}
{%- set monitor_socket = socket_directory ~ '/monitor' -%}
{%- set spice_socket = socket_directory ~ '/spice' -%}

{%- set temp_buses = namespace(items=[], index=4) -%}
{%- set temp_cards = namespace(items=[], index=0) -%}
{%- set temp_disks = namespace(items=[], index=0) -%}
{%- set temp_networks = namespace(items=[], index=1) -%}

{%- if guest_disks is defined -%}
	{%- if item[0].disks is defined -%}
		{%- for disk in guest_disks if disk.name in item[0].disks -%}
			{%- if disk.type == 'file' -%}
				{%- set path = disk.path -%}
				{%- set format = disk.format|default('raw') -%}
				{%- set options = "cache=writeback,discard=unmap,detect-zeroes=unmap" -%}
				{%- set temp_disks.items = temp_disks.items + [ dict(index=temp_disks.index, path=path, format=format, options=options) ] -%}
				{%- set temp_disks.index = temp_disks.index + 1 -%}
			{%- elif disk.type == 'device' -%}
				{%- set path = '/dev/' ~ disk.device -%}
				{%- set format = 'raw' -%}
				{%- set options = "cache=none,aio=native,discard=unmap,detect-zeroes=unmap" -%}
				{%- set temp_disks.items = temp_disks.items + [ dict(index=temp_disks.index, path=path, format=format, options=options) ] -%}
				{%- set temp_disks.index = temp_disks.index + 1 -%}
			{%- elif disk.type == 'lvm' -%}
				{%- set path = '/dev/mapper/' ~ disk.volume_group ~ '-' ~ disk.logical_volume -%}
				{%- set format = 'raw' -%}
				{%- set options = "cache=none,aio=native,discard=unmap,detect-zeroes=unmap" -%}
				{%- set temp_disks.items = temp_disks.items + [ dict(index=temp_disks.index, path=path, format=format, options=options) ] -%}
				{%- set temp_disks.index = temp_disks.index + 1 -%}
			{%- endif -%}
		{%- endfor -%}
	{%- endif -%}
{%- endif -%}

{%- if item[0].networks is defined -%}
	{%- for key in item[0].networks -%}
		{%- set device = key ~ '-' ~ name -%}
		{%- set master = key -%}
		{%- set temp_networks.items = temp_networks.items + [ dict(index=temp_networks.index, bus=temp_buses.index, device=device, master=master) ] -%}
		{%- set temp_networks.index = temp_networks.index + 1 -%}
		{%- set temp_buses.items = temp_buses.items + [ dict(index=temp_buses.index) ] -%}
		{%- set temp_buses.index = temp_buses.index + 1 -%}
	{%- endfor -%}
{%- endif -%}

{%- if guest_passthroughs is defined -%}
	{%- if item[0].passthroughs is defined -%}
		{%- for passthrough in guest_passthroughs if passthrough.name in item[0].passthroughs -%}
			{%- for bus in passthrough.tree -%}
				{%- for function in bus -%}
					{%- set address = function.address -%}
					{%- set options = ',' ~ function.options if function.options is defined and function.options != '' else '' -%}
					{%- set temp_cards.items = temp_cards.items + [ dict(index=temp_cards.index, bus=temp_buses.index, address=address, options=options) ] -%}
					{%- set temp_cards.index = temp_cards.index + 1 -%}
				{%- endfor -%}
				{%- set temp_buses.items = temp_buses.items + [ dict(index=temp_buses.index) ] -%}
				{%- set temp_buses.index = temp_buses.index + 1 -%}
			{%- endfor -%}
		{%- endfor -%}
	{%- endif -%}
{%- endif -%}

{%- set processor_socket = item[0].processor_socket|default(1) -%}
{%- set processor_core = item[0].processor_core|default(4) -%}
{%- set processor_thread = item[0].processor_thread|default(1) -%}

{%- set memory_size = item[0].memory_size|default(4) -%}
{%- set memory_prealloc = item[0].memory_prealloc|default(4) -%}

{%- set video_hardware = item[0].video_hardware|default('qxl') -%}
{%- set sound_hardware = item[0].sound_hardware|default('hda') -%}

{%- set looking_glass = item[0].looking_glass|default(true) -%}
{%- set looking_glass_file = ivshmem_directory ~ '/looking_glass' -%}
{%- set looking_glass_size = 32 -%}

{%- set piper = item[0].piper|default(true) -%}
{%- set piper_playback_file = socket_directory ~ '/playback' -%}
{%- set piper_capture_file = socket_directory ~ '/capture' -%}
{%- set piper_format = "S16_LE" -%}
{%- set piper_rate = 44100 -%}
{%- set piper_channels = 2 -%}
{%- set piper_period_time = 10 -%}
{%- set piper_period_size = (piper_rate * piper_period_time / 1000)|int -%}

{%- set scream = item[0].scream|default(true) -%}
{%- set scream_file = ivshmem_directory ~ '/scream' -%}
{%- set scream_size = 2 -%}

{%- set buses = temp_buses.items -%}
{%- set cards = temp_cards.items -%}
{%- set disks = temp_disks.items -%}
{%- set networks = temp_networks.items -%}


if [[ -f "{{ config_file }}" ]] ; then
  source "{{ config_file }}"
fi


#
# Start the systemd service that executes the guest.
# Usage: start
#

start() {
	if [[ $EUID -eq 0 ]]; then
	  exec systemctl start {{ name }}.service
	else
	  exec sudo systemctl start {{ name }}.service
	fi
}


#
# Open the viewer to the guest.
# Usage: viewer
#

viewer() {
{% if looking_glass %}
	if [[ "x$BOOTSTRAP" != "x" ]]; then
		exec spicy --uri "spice+unix://{{ spice_socket }}"
	else
		looking-glass-client -f "{{ looking_glass_file }}" -c "{{ spice_socket }}" -p 0 -o "opengl:amdPinnedMem=0" -o "win:title={{ title }}" -a &
		LOOKING_GLASS_PID=$!

{% if scream %}
		env "PULSE_PROP_OVERRIDE_application.name={{ title }}" "PULSE_PROP_OVERRIDE_application.process.id=$LOOKING_GLASS_PID" scream-ivshmem-pulse "{{ scream_file }}" &
		SCREAM_PID=$!

		wait $LOOKING_GLASS_PID
		kill -TERM $SCREAM_PID
		wait $SCREAM_PID
{% elif piper %}
		env "PULSE_PROP_OVERRIDE_application.name={{ title }}" "PULSE_PROP_OVERRIDE_application.process.id=$LOOKING_GLASS_PID" piper drain "{{ piper_playback_file }}" alsa &
		PIPER_PID=$!

		wait $LOOKING_GLASS_PID
		kill -TERM $PIPER_PID
		wait $PIPER_PID
{% else %}
		wait $LOOKING_GLASS_PID
{% endif %}
	fi
{% else %}
	exec spicy --uri "spice+unix://{{ spice_socket }}"
{% endif %}
}


#
# Attach a USB device to the guest.
# Usage: attach-usb <name> <usb-bus> <usb-addr>
#

attach_usb() {
	if [[ $# -ge 3 ]]; then
		echo "device_add usb-host,id=$1,hostbus=$2,hostaddr=$3" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
	else
		echo "info usbhost" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
	fi
}


#
# Detach a USB device from the guest.
# Usage: detach-usb <name>
#

detach_usb() {
	if [[ $# -ge 1 ]]; then
	  echo "device_del $1" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
	else
	  echo "info usbhost" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
	fi
}


#
# Insert a disk to a CD/DVD drive in the guest.
# Usage: insert-cdrom <drive> <image-file>
#

insert_cdrom() {
	if [[ $# -ge 2 ]]; then
  	echo "change $1 $2" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
	else
	  echo "info block" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
	fi
}


#
# Eject a CD/DVD drive in the guest.
# Usage: insert-cdrom <drive>
#

eject_cdrom() {
	if [[ $# -ge 1 ]]; then
  	echo "eject $1" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
	else
	  echo "info block" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
	fi
}


#
# Connect to qemu monitor of the guest.
# Usage: monitor
#

monitor() {
	exec socat - "UNIX-CONNECT:{{ monitor_socket }}"
}


#
# Prepare the environment so that the guest can start.
# Usage: prepare
#

prepare() {
  if [[ ! -d "{{ guest_data_prefix }}" ]]; then
		install -o root -g root -m 755 -d "{{ guest_data_prefix }}"
		install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ data_directory }}"
		install -o "{{ account }}" -g "{{ account }}" -m 0644 /usr/share/OVMF/OVMF_VARS.fd "{{ bios_file }}"
	elif [[ ! -d "{{ data_directory }}" ]]; then
		install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ data_directory }}"
		install -o "{{ account }}" -g "{{ account }}" -m 0644 /usr/share/OVMF/OVMF_VARS.fd "{{ bios_file }}"
	elif [[ ! -f "{{ bios_file }}" ]]; then
		install -o "{{ account }}" -g "{{ account }}" -m 0644 /usr/share/OVMF/OVMF_VARS.fd "{{ bios_file }}"
	fi

	if [[ ! -d "{{ guest_socket_prefix }}" ]]; then
		install -o root -g root -m 755 -d "{{ guest_socket_prefix }}"
		install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ socket_directory }}"
	elif [[ ! -d "{{ socket_directory }}" ]]; then
		install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ socket_directory }}"
	fi

	if [[ ! -d "{{ guest_ivshmem_prefix }}" ]]; then
		install -o root -g root -m 755 -d "{{ guest_ivshmem_prefix }}"
		install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ ivshmem_directory }}"
	elif [[ ! -d "{{ ivshmem_directory }}" ]]; then
		install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ ivshmem_directory }}"
	fi
{% if looking_glass %}

	touch "{{ looking_glass_file }}"
	chown "{{ account }}:{{ account }}" "{{ looking_glass_file }}"
	chmod 0660 "{{ looking_glass_file }}"
{% endif %}
{% if scream %}

	touch "{{ scream_file }}"
	chown "{{ account }}:{{ account }}" "{{ scream_file }}"
	chmod 0660 "{{ scream_file }}"
{% endif %}
{% for network in networks %}

	ip tuntap add "{{ network.device }}" mode tap user "{{ account }}" group "{{ account }}"
	ip link set "{{ network.device }}" up
	ip link set "{{ network.device }}" master "{{ network.master }}"
{% endfor %}
}


#
# Clean up the environment after the guest has stopped.
# Usage: cleanup
#

cleanup() {
  if [[ ! -d "{{ guest_data_prefix }}" ]]; then
		install -o root -g root -m 755 -d "{{ guest_data_prefix }}"
		install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ data_directory }}"
		install -o "{{ account }}" -g "{{ account }}" -m 0644 /usr/share/OVMF/OVMF_VARS.fd "{{ bios_file }}"
	elif [[ ! -d "{{ data_directory }}" ]]; then
		install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ data_directory }}"
		install -o "{{ account }}" -g "{{ account }}" -m 0644 /usr/share/OVMF/OVMF_VARS.fd "{{ bios_file }}"
	elif [[ ! -f "{{ bios_file }}" ]]; then
		install -o "{{ account }}" -g "{{ account }}" -m 0644 /usr/share/OVMF/OVMF_VARS.fd "{{ bios_file }}"
	fi
{% for network in networks %}

	ip link set "{{ network.device }}" nomaster
	ip link set "{{ network.device }}" down
	ip tuntap del "{{ network.device }}" mode tap
{% endfor %}
}


#
# Run the guest virtual machine.
# Usage: cleanup
#

run() {
	VGA="{{ video_hardware }}"
{% for card in cards %}
	CARD{{ card.index }}=$(lspci -n | grep "{{ card.address }}" | cut -d ' ' -f 1 | head)
{% endfor %}

	if [[ "x$BOOTSTRAP" != "x" ]]; then
		VGA="qxl"
	fi

{% if piper %}
	export QEMU_AUDIO_DRV="alsa"
	export QEMU_AUDIO_DAC_FIXED_FREQ="{{ piper_rate }}"
	export QEMU_AUDIO_ADC_FIXED_FREQ="{{ piper_rate }}"
	export QEMU_AUDIO_TIMER_PERIOD="{{ (2 * 1000 / audio_period_time)|int }}"
	export QEMU_ALSA_DAC_DEV="piper"
	export QEMU_ALSA_DAC_PERIOD_SIZE="{{ piper_period_size }}"
	export QEMU_ALSA_ADC_DEV="piper"
	export QEMU_ALSA_ADC_PERIOD_SIZE="{{ piper_period_size }}"

{% else %}
	export QEMU_AUDIO_DRV="none"

{% endif %}
	exec qemu-system-x86_64 \
	  -name "{{ name }}" \
	  -monitor "unix:{{ monitor_socket }},server,nowait" \
	  -pidfile "{{ socket_directory }}/pid" \
	  -spice "unix,addr={{ spice_socket }},disable-ticketing" \
	  -enable-kvm \
	  -machine "q35,accel=kvm,sata=on,usb=on,mem-merge=off" \
	  -cpu "host,kvm=off,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time,hv_vendor_id=dummy" \
	  -smp "sockets={{ processor_socket }},cores={{ processor_core }},threads={{ processor_thread }}" \
	  -m "{{ memory_size }}G" {% if memory_prealloc -%} -mem-prealloc {%- endif %} \
	  -display "none" \
	  -nographic \
	  -vga "$VGA" \
{% if sound_hardware in ['all', 'sb16', 'es1370', 'ac97', 'adlib', 'gus', 'cs4231a', 'hda', 'pcspk'] %}
		-soundhw "{{ sound_hardware }}" \
{% endif %}
	  -usb \
	  -rtc "base=localtime" \
	  -serial "none" \
	  -parallel "none" \
	  -drive "if=pflash,id=flash.0,file=/usr/share/OVMF/OVMF_CODE.fd,format=raw,readonly" \
	  -drive "if=pflash,id=flash.1,file={{ bios_file }},format=raw" \
	  -drive "if=none,id=cd.0,media=cdrom,readonly" \
	  -drive "if=none,id=cd.1,media=cdrom,readonly" \
{% for disk in disks %}
	  -drive "if=none,id=hd.{{ disk.index }},file={{ disk.path }},format={{ disk.format }},media=disk,{{ disk.options }}" \
{% endfor %}
	  -netdev "user,id=network.0,restrict=on" \
{% for network in networks %}
	  -netdev "tap,id=network.{{ network.index }},ifname={{ network.device }},script=no,downscript=no" \
{% endfor %}
	  -chardev "spicevmc,id=spice.agent,name=vdagent,debug=0" \
	  -chardev "spicevmc,id=spice.usbredir.0,name=usbredir" \
	  -chardev "spicevmc,id=spice.usbredir.1,name=usbredir" \
	  -chardev "spicevmc,id=spice.usbredir.2,name=usbredir" \
	  -chardev "spicevmc,id=spice.usbredir.3,name=usbredir" \
	  -device "ioh3420,id=pcie.1,bus=pcie.0,addr=1c.0,port=1,chassis=1,multifunction=on" \
	  -device "ioh3420,id=pcie.2,bus=pcie.0,addr=1c.1,port=2,chassis=2,multifunction=on" \
	  -device "ioh3420,id=pcie.3,bus=pcie.0,addr=1c.2,port=3,chassis=3,multifunction=on" \
{% for bus in buses %}
	  -device "ioh3420,id=pcie.{{ bus.index }},bus=pcie.0,addr=1c.{{ bus.index - 1 }},port={{ bus.index }},chassis={{ bus.index }},multifunction=on" \
{% endfor %}
	  -device "virtio-balloon-pci,id=balloon,bus=pcie.1" \
	  -device "virtio-scsi-pci,id=scsi,bus=pcie.2" \
	  -device "virtio-net-pci,id=nic.0,bus=pcie.3,netdev=network.0" \
{% for network in networks %}
	  -device "virtio-net-pci,id=nic.{{ network.index }},bus=pcie.{{ network.bus }},netdev=network.{{ network.index }}" \
{% endfor %}
{% for card in cards %}
	  -device "vfio-pci,id=card.{{ card.index }},bus=pcie.{{ card.bus }},host=$CARD{{ card.index }}{{ card.options }}" \
{% endfor %}
	  -device "ide-cd,id=drive.cd.0,bus=ide.0,unit=0,drive=cd.0,bootindex=0" \
	  -device "ide-cd,id=drive.cd.1,bus=ide.1,unit=0,drive=cd.1,bootindex=1" \
{% for disk in disks %}
	  -device "scsi-hd,id=drive.hd.{{ disk.index }},bus=scsi.0,drive=hd.{{ disk.index }},bootindex={{ disk.index + 2 }}" \
{% endfor %}
{% if looking_glass %}
	  -device "ivshmem-plain,memdev=looking_glass,bus=pcie.0" \
	  -object "memory-backend-file,id=looking_glass,share=on,mem-path={{ looking_glass_file }},size={{ looking_glass_size }}M" \
{% endif %}
{% if scream %}
	  -device "ivshmem-plain,memdev=scream,bus=pcie.0" \
	  -object "memory-backend-file,id=scream,share=on,mem-path={{ scream_file }},size={{ scream_size }}M" \
{% endif %}
	  -device "virtio-serial" \
	  -device "virtserialport,chardev=spice.agent,name=com.redhat.spice.0" \
	  -device "ich9-usb-ehci2,id=ehci.1,bus=pcie.0,addr=1a.7,multifunction=on" \
	  -device "ich9-usb-uhci4,id=uhci.1,bus=pcie.0,addr=1a.0,masterbus=ehci.1.0,firstport=0,multifunction=on" \
	  -device "ich9-usb-uhci5,id=uhci.2,bus=pcie.0,addr=1a.1,masterbus=ehci.1.0,firstport=2,multifunction=on" \
	  -device "ich9-usb-uhci6,id=uhci.3,bus=pcie.0,addr=1a.2,masterbus=ehci.1.0,firstport=4,multifunction=on" \
	  -device "usb-redir,id=usbredir.0,chardev=spice.usbredir.0" \
	  -device "usb-redir,id=usbredir.1,chardev=spice.usbredir.1" \
	  -device "usb-redir,id=usbredir.2,chardev=spice.usbredir.2" \
	  -device "usb-redir,id=usbredir.3,chardev=spice.usbredir.3"
}

