#!/bin/bash


{% set title = guest.title -%}
{% set account = guest.account -%}

{% set config_directory = "/etc/default/guest" -%}
{% set data_directory = service_guest_data_prefix ~ "/" ~ name -%}
{% set socket_directory = service_guest_socket_prefix ~ "/" ~ name -%}
{% set ivshmem_directory = service_guest_ivshmem_prefix ~ "/" ~ name -%}

{% set config_file = config_directory ~ "/" ~ name -%}
{% set bios_file = data_directory ~ '/OVMF_VARS.fd' -%}
{% set monitor_socket = socket_directory ~ '/monitor' -%}
{% set spice_socket = socket_directory ~ '/spice.socket' -%}

{% set processor_socket = guest.processor_socket|default(1) -%}
{% set processor_core = guest.processor_core|default(4) -%}
{% set processor_thread = guest.processor_thread|default(1) -%}

{% set memory_size = guest.memory_size|default(4) -%}
{% set memory_prealloc = guest.memory_prealloc|default(4) -%}

{% set looking_glass_file = ivshmem_directory ~ '/looking_glass' -%}
{% set looking_glass_size = 64 -%}

{% set scream_file = ivshmem_directory ~ '/scream' -%}
{% set scream_size = 2 -%}

{% set rendernode = "" -%}

{% if hardware_pci_devices is defined and hardware_video_device is defined -%}
{% if hardware_video_device in hardware_pci_devices -%}
  {% set address = hardware_pci_devices[hardware_video_device].addresses[0] -%}
  {% set rendernode = "/dev/dri/by-path/pci-%04x:%02x:%02x.%x-render" % (
      address['domain']|default("0")|int(base=16), 
      address['bus']|int(base=16),
      address['device']|int(base=16),
      address['function']|int(base=16)
    )
  -%}
{% endif -%}
{% endif -%}


if [[ -f "{{ config_file }}" ]] ; then
  source "{{ config_file }}"
fi


#
# Start the systemd service that executes the guest.
# Usage: start
#

start() {
  exec systemctl start {{ name }}.service
}


#
# Reset the guest.
# Usage: reset
#

reset() {
  echo "system_reset" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
}


#
# Quit the guest.
# Usage: quit
#

quit() {
  echo "quit" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
}


#
# Open the viewer to the guest.
# Usage: viewer
#

viewer() {
{% if guest.video_hardware|default('qxl') == 'passthrough' %}
  if [[ "x$FALLBACK" != "x" ]]; then
    exec spicy --uri "spice+unix://{{ spice_socket }}"
  else
    looking-glass-client -f "{{ looking_glass_file }}" -c "{{ spice_socket }}" -p 0 -a -n -r \
      "win:title={{ title }}" \
      "win:size={{ guest.looking_glass_viewport|default('1280x720') }}" \
      &
    LOOKING_GLASS_PID=$!

{% if guest.looking_glass_audio|default('spice') == 'scream' %}
    env "PULSE_PROP_OVERRIDE_application.name={{ title }}" "PULSE_PROP_OVERRIDE_application.process.id=$LOOKING_GLASS_PID" scream \
{% if guest.scream_transport|default('network') == 'ivshmem' %}
      -m "{{ scream_file }}" &
{% else %}
      -g "{{ scream_group|default('239.255.77.77') }}" \
      -p "{{ scream_port|default(4010) }}" 
      -i guest &
{% endif %}
    SCREAM_PID=$!

    wait $LOOKING_GLASS_PID
    kill -TERM $SCREAM_PID
    wait $SCREAM_PID
{% else %}
    wait $LOOKING_GLASS_PID
{% endif %}
  fi
{% else %}
  exec spicy --uri "spice+unix://{{ spice_socket }}"
{% endif %}
}


#
# Connect to qemu monitor of the guest.
# Usage: monitor
#

monitor() {
  exec socat - "UNIX-CONNECT:{{ monitor_socket }}"
}


#
# Attach input devices to the guest.
# Usage: attach-input
#

attach_input() {
  echo "object_add input-linux,id=mousein,evdev={{ service_guest_mouse }}" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
  echo "object_add input-linux,id=keyboardin,evdev={{ service_guest_keyboard }},grab_all=on,repeat=on" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
}


#
# Detach input devices from the guest.
# Usage: detach-input
#

detach_input() {
  echo "object_del mousein" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
  echo "object_del keyboardin" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
}


#
# Attach a USB device to the guest.
# Usage: attach-usb <name> <usb-bus> <usb-addr>
#

attach_usb() {
  if [[ $# -ge 3 ]]; then
    echo "device_add usb-host,id=$1,hostbus=$2,hostaddr=$3" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
  else
    echo "info usbhost" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
  fi
}


#
# Detach a USB device from the guest.
# Usage: detach-usb <name>
#

detach_usb() {
  if [[ $# -ge 1 ]]; then
    echo "device_del $1" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
  else
    echo "info usbhost" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
  fi
}


#
# Insert a disk to a CD/DVD drive in the guest.
# Usage: insert-cdrom <drive> <image-file>
#

insert_cdrom() {
  if [[ $# -ge 2 ]]; then
    echo "change $1 $(realpath $2)" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
  else
    echo "info block" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
  fi
}


#
# Eject a CD/DVD drive in the guest.
# Usage: insert-cdrom <drive>
#

eject_cdrom() {
  if [[ $# -ge 1 ]]; then
    echo "eject $1" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
  else
    echo "info block" | socat - "UNIX-CONNECT:{{ monitor_socket }}"
  fi
}


#
# Prepare the environment so that the guest can start.
# Usage: prepare
#

prepare() {
  if [[ ! -d "{{ service_guest_data_prefix }}" ]]; then
    install -o root -g root -m 755 -d "{{ service_guest_data_prefix }}"
    install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ data_directory }}"
    install -o "{{ account }}" -g "{{ account }}" -m 0644 /usr/share/OVMF/OVMF_VARS_4M.fd "{{ bios_file }}"
  elif [[ ! -d "{{ data_directory }}" ]]; then
    install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ data_directory }}"
    install -o "{{ account }}" -g "{{ account }}" -m 0644 /usr/share/OVMF/OVMF_VARS_4M.fd "{{ bios_file }}"
  elif [[ ! -f "{{ bios_file }}" ]]; then
    install -o "{{ account }}" -g "{{ account }}" -m 0644 /usr/share/OVMF/OVMF_VARS_4M.fd "{{ bios_file }}"
  fi

  if [[ ! -d "{{ service_guest_socket_prefix }}" ]]; then
    install -o root -g root -m 755 -d "{{ service_guest_socket_prefix }}"
    install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ socket_directory }}"
  elif [[ ! -d "{{ socket_directory }}" ]]; then
    install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ socket_directory }}"
  fi

  if [[ ! -d "{{ service_guest_ivshmem_prefix }}" ]]; then
    install -o root -g root -m 755 -d "{{ service_guest_ivshmem_prefix }}"
    install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ ivshmem_directory }}"
  elif [[ ! -d "{{ ivshmem_directory }}" ]]; then
    install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ ivshmem_directory }}"
  fi
{% if guest.video_hardware|default('qxl') == 'passthrough' %}

  touch "{{ looking_glass_file }}"
  chown "{{ account }}:{{ account }}" "{{ looking_glass_file }}"
  chmod 0660 "{{ looking_glass_file }}"

{% if guest.looking_glass_audio|default('spice') == 'scream' -%}
{% if guest.scream_transport|default('network') == 'ivshmem' %}
  touch "{{ scream_file }}"
  chown "{{ account }}:{{ account }}" "{{ scream_file }}"
  chmod 0660 "{{ scream_file }}"
{% endif -%}
{% endif -%}
{% endif -%}
{% if guest.passthroughs|length > 0 %}

{% for device in guest.passthroughs|default([]) if device in hardware_vfio_devices|default({}) and hardware_vfio_devices[device].device in hardware_pci_devices|default({}) %}
  /usr/local/sbin/vfio-bind-{{ device }}
{% endfor %}
{% endif %}

  ip tuntap add "guest-{{ name }}" mode tap user "{{ account }}" group "{{ account }}"
  ip link set "guest-{{ name }}" up
  ip link set "guest-{{ name }}" master "guest"
}


#
# Clean up the environment after the guest has stopped.
# Usage: cleanup
#

cleanup() {
  if [[ ! -d "{{ service_guest_data_prefix }}" ]]; then
    install -o root -g root -m 755 -d "{{ service_guest_data_prefix }}"
    install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ data_directory }}"
    install -o "{{ account }}" -g "{{ account }}" -m 0644 /usr/share/OVMF/OVMF_VARS_4M.fd "{{ bios_file }}"
  elif [[ ! -d "{{ data_directory }}" ]]; then
    install -o "{{ account }}" -g "{{ account }}" -m 0755 -d "{{ data_directory }}"
    install -o "{{ account }}" -g "{{ account }}" -m 0644 /usr/share/OVMF/OVMF_VARS_4M.fd "{{ bios_file }}"
  elif [[ ! -f "{{ bios_file }}" ]]; then
    install -o "{{ account }}" -g "{{ account }}" -m 0644 /usr/share/OVMF/OVMF_VARS_4M.fd "{{ bios_file }}"
  fi

  ip link set "guest-{{ name }}" nomaster
  ip link set "guest-{{ name }}" down
  ip tuntap del "guest-{{ name }}" mode tap
{% if guest.passthroughs|length > 0 %}

{% for device in guest.passthroughs|default([]) if device in hardware_vfio_devices|default({}) and hardware_vfio_devices[device].device in hardware_pci_devices|default({}) %}
  /usr/local/sbin/vfio-unbind-{{ device }}
{% endfor %}
{% endif %}
}


#
# Run the guest virtual machine.
# Usage: cleanup
#

run() {
{% if guest.audio_hardware|default('hda') == 'none' %}
  AUDIO_DEVICE="pci-testdev,id=sound,bus=pcie.0"
{% elif guest.audio_hardware|default('hda') == 'ac97' %}
  AUDIO_DEVICE="ac97,id=sound,bus=pcie.0"
{% else %}
  AUDIO_DEVICE="ich9-intel-hda,id=sound,bus=pcie.0"
{% endif -%}
{% if guest.video_hardware|default('qxl') == 'passthrough' %}
  VIDEO_DEVICE="pci-testdev,id=video,bus=pcie.0"
  SPICE_OPTION=""
{% elif guest.video_hardware|default('qxl') == 'virtio' -%}
{% if rendernode != "" %}
  VIDEO_DEVICE="virtio-vga,id=video,bus=pcie.0,virgl=on"
  SPICE_OPTION=",gl=on,rendernode={{ rendernode }}"
{% else %}
  VIDEO_DEVICE="virtio-vga,id=video,bus=pcie.0,virgl=on"
  SPICE_OPTION=",gl=on"
{% endif -%}
{% else %}
  VIDEO_DEVICE="qxl-vga,id=video,bus=pcie.0"
  SPICE_OPTION=""
{% endif %}

  if [[ "x$FALLBACK" != "x" ]]; then
    AUDIO_DEVICE="ich9-intel-hda,id=sound,bus=pcie.0"
    VIDEO_DEVICE="qxl-vga,id=video,bus=pcie.0"
    SPICE_OPTION=""
  fi

{% if guest.inhibition_lock|default('none') == 'all' %}
  exec systemd-inhibit --what 'sleep:shutdown' --who '{{ guest.title|default(name) }}' --why 'Waiting for {{ guest.title|default(name) }} to shutdown' qemu-system-x86_64 \
{% elif guest.inhibition_lock|default('none') == 'sleep' %}
  exec systemd-inhibit --what 'sleep' --who '{{ guest.title|default(name) }}' --why 'Waiting for {{ guest.title|default(name) }} to shutdown' qemu-system-x86_64 \
{% elif guest.inhibition_lock|default('none') == 'shutdown' %}
  exec systemd-inhibit --what 'shutdown' --who '{{ guest.title|default(name) }}' --why 'Waiting for {{ guest.title|default(name) }} to shutdown' qemu-system-x86_64 \
{% else %}
  exec qemu-system-x86_64 \
{% endif %}
    -name "{{ name }}" \
    -pidfile "{{ socket_directory }}/pid" \
    -monitor "unix:{{ monitor_socket }},server,nowait" \
    -spice "unix,addr={{ spice_socket }},disable-ticketing${SPICE_OPTION}" \
    -enable-kvm \
    -nographic \
    -machine "q35,accel=kvm,mem-merge=off,sata=on,usb=on" \
    -cpu "host,kvm=off,hv_relaxed,hv_vapic,hv_spinlocks=0x1fff,hv_vpindex,hv_runtime,hv_time,hv_synic,hv_stimer,hv_tlbflush,hv_ipi,hv_frequencies,hv_vendor_id=dummy" \
    -smp "sockets={{ processor_socket }},cores={{ processor_core }},threads={{ processor_thread }}" \
    -m "{{ memory_size }}G" {% if memory_prealloc -%} -mem-prealloc {%- endif %} \
    -display "none" \
    -audiodev "spice,id=sound" \
    -usb \
    -rtc "base=localtime" \
    -vga "none" \
    -serial "none" \
    -parallel "none" \
{% if guest.hpet|default(true) == false %}
    -no-hpet \
{% endif %}
    -drive "if=pflash,id=flash0,index=0,file=/usr/share/OVMF/OVMF_CODE_4M.fd,format=raw,readonly" {# enable UEFI boot using OVMF firmware #}\
    -drive "if=pflash,id=flash1,index=1,file={{ bios_file }},format=raw" {# enable UEFI boot using OVMF firmware #}\
    -device "${VIDEO_DEVICE}" \
    -device "${AUDIO_DEVICE}" \
    -device "virtio-keyboard,id=keyboard,bus=pcie.0" \
    -device "virtio-mouse,id=mouse,bus=pcie.0" \
    -device "virtio-balloon-pci,id=balloon,bus=pcie.0" \
    -device "virtio-scsi-pci,id=scsi,bus=pcie.0,iothread=iothread1,num_queues=4,disable-legacy=off,disable-modern=on" \
    -device "virtio-serial,id=serial,bus=pcie.0" {# virtio-serial bus for spice #}\
    -device "nec-usb-xhci,id=usb3,bus=pcie.0" {# usb bus for spice #}\
    -drive "if=none,id=cd0,media=cdrom,readonly" {# note that if=ide does not work for q35; attach to the machine using ide-cd device below #}\
    -drive "if=none,id=cd1,media=cdrom,readonly" {# note that if=ide does not work for q35; attach to the machine using ide-cd device below #}\
    -device "ide-cd,id=drive0,bus=ide.0,drive=cd0,bootindex=1" \
    -device "ide-cd,id=drive1,bus=ide.1,drive=cd1,bootindex=2" \
{% for name in guest.disks|default([]) if name in service_guest_disks -%}
{% set disk = service_guest_disks[name] -%}
{% set diskidx = loop.index0 -%}
{% set driveidx = loop.index0 + 2 -%}
{% set bootidx = loop.index0 + 3 -%}
{% if disk.type == 'file' %}
    -drive "if=none,id=hd{{ diskidx }},file={{ disk.path }},format={{ disk.format|default('raw') }},media=disk,cache=writeback,aio=threads,discard=unmap,detect-zeroes=unmap" \
    -device "scsi-hd,id=drive{{ driveidx }},bus=scsi.0,drive=hd{{ diskidx }},bootindex={{ bootidx }}" \
{% elif disk.type == 'device' %}
    -drive "if=none,id=hd{{ diskidx }},file=/dev/{{ disk.device }},format=raw,media=disk,cache=none,aio=threads,discard=unmap,detect-zeroes=unmap" \
    -device "scsi-hd,id=drive{{ driveidx }},bus=scsi.0,drive=hd{{ diskidx }},bootindex={{ bootidx }}" \
{% elif disk.type == 'lvm' %}
    -drive "if=none,id=hd{{ diskidx }},file=/dev/mapper/{{ disk.volume_group }}-{{ disk.logical_volume }},format=raw,media=disk,cache=none,aio=threads,discard=unmap,detect-zeroes=unmap" \
    -device "scsi-hd,id=drive{{ driveidx }},bus=scsi.0,drive=hd{{ diskidx }},bootindex={{ bootidx }}" \
{% endif -%}
{% endfor %}
    -netdev "tap,id=network0,ifname=guest-{{ name }},script=no,downscript=no" \
    -device "virtio-net-pci,id=nic0,netdev=network0,bus=pcie.0" \
{% for device in guest.passthroughs|default([]) if device in hardware_vfio_devices|default({}) and hardware_vfio_devices[device].device in hardware_pci_devices|default({}) -%}
{% set card = hardware_pci_devices[hardware_vfio_devices[device].device].addresses -%}
{% set cardidx = loop.index0 -%}
{% set slotidx = loop.index0 + 1 %}
    -device "pcie-root-port,id=card{{ cardidx }},bus=pcie.0,slot={{ slotidx }},x-speed=8,x-width=16{%- if card|length > 1 -%},multifunction=on{%- endif -%}" \
{% for function in card -%}
{% set funcidx = loop.index0 %}
    -device "vfio-pci,id=card{{ cardidx }}.{{ funcidx }},bus=card{{ cardidx }},addr=00.{{ funcidx }},host={{ function|pciaddr('pciutils') }}{%- if card|length > 1 -%},multifunction=on{%- endif -%}" \
{% endfor -%}
{% endfor -%}
{% if guest.video_hardware|default('qxl') == 'passthrough' %}
    -device "ivshmem-plain,memdev=looking_glass,bus=pcie.0" \
    -object "memory-backend-file,id=looking_glass,share=on,mem-path={{ looking_glass_file }},size={{ looking_glass_size }}M" \
{% if guest.looking_glass_audio|default('spice') == 'scream' -%}
{% if guest.scream_transport|default('network') == 'ivshmem' %}
    -device "ivshmem-plain,memdev=scream,bus=pcie.0" \
    -object "memory-backend-file,id=scream,share=on,mem-path={{ scream_file }},size={{ scream_size }}M" \
{% endif -%}
{% endif -%}
{% endif %}
    -chardev "spicevmc,id=agent,debug=0,name=vdagent" {# create chardev for spice agent channel for guest agent #}\
    -device "virtserialport,bus=serial.0,nr=1,chardev=agent,name=com.redhat.spice.0" {# attach spice agent channel chardev to serial bus #}\
    -chardev "spiceport,id=webdav,debug=0,name=org.spice-space.webdav.0" {# create chardev for spice webdav VDI port for folder sharing #}\
    -device "virtserialport,bus=serial.0,nr=2,chardev=webdav,name=org.spice-space.webdav.0" {# attach spice webdav VDI port to serial bus #}\
    -chardev "spicevmc,id=usbredirch0,name=usbredir" {# create chardev for spice usb channel #}\
    -chardev "spicevmc,id=usbredirch1,name=usbredir" {# create chardev for spice usb channel #}\
    -chardev "spicevmc,id=usbredirch2,name=usbredir" {# create chardev for spice usb channel #}\
    -chardev "spicevmc,id=usbredirch3,name=usbredir" {# create chardev for spice usb channel #}\
    -device "usb-redir,id=usbredir0,chardev=usbredirch0,bus=usb3.0" {# attach spice usb channel chardev to usb bus #}\
    -device "usb-redir,id=usbredir1,chardev=usbredirch1,bus=usb3.0" {# attach spice usb channel chardev to usb bus #}\
    -device "usb-redir,id=usbredir2,chardev=usbredirch2,bus=usb3.0" {# attach spice usb channel chardev to usb bus #}\
    -device "usb-redir,id=usbredir3,chardev=usbredirch3,bus=usb3.0" {# attach spice usb channel chardev to usb bus #}\
    -object "iothread,id=iothread1"
}

